/* tslint:disable */
/* eslint-disable */
/**
 * Torrents Stream Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
    ApiErrorModel,
    ApiErrorModelFromJSON,
    ApiErrorModelToJSON,
    MagnetModel,
    MagnetModelFromJSON,
    MagnetModelToJSON,
    ProviderModel,
    ProviderModelFromJSON,
    ProviderModelToJSON,
    ProviderTorrentModel,
    ProviderTorrentModelFromJSON,
    ProviderTorrentModelToJSON,
} from '../models'

export interface GetMagnetRequest {
    provider: string
    torrentId: string
}

export interface SearchTorrentsRequest {
    query: string
    provider: string
    category?: string
}

/**
 *
 */
export class BrowseApi extends runtime.BaseAPI {
    /**
     */
    async getMagnetRaw(
        requestParameters: GetMagnetRequest
    ): Promise<runtime.ApiResponse<MagnetModel>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter requestParameters.provider was null or undefined when calling getMagnet.'
            )
        }

        if (requestParameters.torrentId === null || requestParameters.torrentId === undefined) {
            throw new runtime.RequiredError(
                'torrentId',
                'Required parameter requestParameters.torrentId was null or undefined when calling getMagnet.'
            )
        }

        const queryParameters: runtime.HTTPQuery = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = typeof token === 'function' ? token('apiKey', []) : token

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request({
            path: `/api/browse/providers/{provider}/magnet/{torrentId}`
                .replace(`{${'provider'}}`, encodeURIComponent(String(requestParameters.provider)))
                .replace(
                    `{${'torrentId'}}`,
                    encodeURIComponent(String(requestParameters.torrentId))
                ),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        })

        return new runtime.JSONApiResponse(response, (jsonValue) => MagnetModelFromJSON(jsonValue))
    }

    /**
     */
    async getMagnet(requestParameters: GetMagnetRequest): Promise<MagnetModel> {
        const response = await this.getMagnetRaw(requestParameters)
        return await response.value()
    }

    /**
     */
    async getProvidersRaw(): Promise<runtime.ApiResponse<Array<ProviderModel>>> {
        const queryParameters: runtime.HTTPQuery = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = typeof token === 'function' ? token('apiKey', []) : token

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request({
            path: `/api/browse/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        })

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(ProviderModelFromJSON)
        )
    }

    /**
     */
    async getProviders(): Promise<Array<ProviderModel>> {
        const response = await this.getProvidersRaw()
        return await response.value()
    }

    /**
     */
    async searchTorrentsRaw(
        requestParameters: SearchTorrentsRequest
    ): Promise<runtime.ApiResponse<Array<ProviderTorrentModel>>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter requestParameters.query was null or undefined when calling searchTorrents.'
            )
        }

        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter requestParameters.provider was null or undefined when calling searchTorrents.'
            )
        }

        const queryParameters: runtime.HTTPQuery = {}

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = typeof token === 'function' ? token('apiKey', []) : token

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request({
            path: `/api/browse/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        })

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(ProviderTorrentModelFromJSON)
        )
    }

    /**
     */
    async searchTorrents(
        requestParameters: SearchTorrentsRequest
    ): Promise<Array<ProviderTorrentModel>> {
        const response = await this.searchTorrentsRaw(requestParameters)
        return await response.value()
    }
}
